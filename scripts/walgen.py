#!/usr/bin/env python3
import json
from pathlib import Path
from colorsys import rgb_to_hls, hls_to_rgb

wal_json = Path.home() / ".cache/wal/colors.json"
waybar_css = Path.home() / ".config/waybar/styles-wal.css"
fuzzel_ini = Path.home() / ".config/fuzzel/colors-wal.ini"
swaync_css = Path.home() / ".config/swaync/colors-wal.css"
kitty_conf = Path.home() / ".cache/wal/colors-kitty.conf"

def hex_to_rgb(h):
    h = h.lstrip('#')
    return tuple(int(h[i:i+2], 16) / 255.0 for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return '#{:02x}{:02x}{:02x}'.format(int(rgb[0]*255), int(rgb[1]*255), int(rgb[2]*255))

def get_lum(c):
    r, g, b = hex_to_rgb(c)
    return 0.299*r + 0.587*g + 0.114*b

def adjust(c, dl=0, sf=1.0):
    r, g, b = hex_to_rgb(c)
    h, l, s = rgb_to_hls(r, g, b)
    l = max(0, min(1, l+dl))
    s = max(0, min(1, s*sf))
    r, g, b = hls_to_rgb(h, l, s)
    return rgb_to_hex((r, g, b))

def best(colors, target, ex=None):
    ex = ex or []
    cands = [c for c in colors.values() if c not in ex]
    return min(cands, key=lambda c: abs(get_lum(c)-target))

with open(wal_json) as f:
    data = json.load(f)
    colors = data["colors"]
    special = data.get("special", {})

bg = special.get("background", colors["color0"])
fg = special.get("foreground", colors["color7"])
bg_lum = get_lum(bg)
dark = bg_lum < 0.5
sorted_colors = sorted(colors.items(), key=lambda x: get_lum(x[1]))

if dark:
    bg0 = sorted_colors[0][1]
    bg1 = sorted_colors[1][1] if len(sorted_colors)>1 else adjust(bg0,0.05)
    bg2 = sorted_colors[2][1] if len(sorted_colors)>2 else adjust(bg0,0.1)
else:
    bg0 = sorted_colors[-1][1]
    bg1 = sorted_colors[-2][1] if len(sorted_colors)>1 else adjust(bg0,-0.05)
    bg2 = sorted_colors[-3][1] if len(sorted_colors)>2 else adjust(bg0,-0.1)

fg1 = fg
fg2 = best(colors,0.7 if dark else 0.3,[bg0,bg1,bg2])
fg4 = colors["color15"] if dark else colors["color0"]

def sat(c):
    r,g,b = hex_to_rgb(c)
    _,_,s = rgb_to_hls(r,g,b)
    return s

def huecolor(hr):
    cands=[]
    for c in colors.values():
        r,g,b=hex_to_rgb(c)
        h,l,s=rgb_to_hls(r,g,b)
        if hr[0]<=h<=hr[1] and s>0.3:
            cands.append((c,s))
    return max(cands,key=lambda x:x[1])[0] if cands else colors["color1"]

red=huecolor((0.9,1.0)) or huecolor((0.0,0.1)) or colors["color1"]
green=huecolor((0.25,0.45)) or colors["color2"]
blue=huecolor((0.55,0.7)) or colors["color4"]

waybar_colors={
    "bg0":bg0,"bg1":bg1,"bg2":bg2,
    "fg1":fg1,"fg2":fg2,"fg4":fg4,
    "red":red,"green":green,"blue":blue,
}

waybar_css.parent.mkdir(parents=True,exist_ok=True)
with open(waybar_css,"w") as f:
    f.write("/* Generated by walgen.py */\n")
    for k,v in waybar_colors.items():
        f.write(f"@define-color {k} {v};\n")

selection_bg=best(colors,0.3 if dark else 0.6)
border_color=adjust(bg0,0.15 if dark else -0.15,1.2)
fuzzel_colors={
    "background":f"{bg0}dd",
    "text":fg1,
    "match":blue,
    "selection":selection_bg,
    "selection-match":green,
    "selection-text":fg4,
    "border":border_color,
}
fuzzel_ini.parent.mkdir(parents=True,exist_ok=True)
with open(fuzzel_ini,"w") as f:
    f.write("# Generated by walgen.py\n")
    for k,v in fuzzel_colors.items():
        f.write(f"{k}={v}\n")

# --- swaync generation ---
swaync_colors = {
    "cc-bg": bg0,
    "noti-border-color": fg4,
    "noti-bg": bg1,
    "noti-bg-darker": adjust(bg1, -0.1),
    "noti-bg-hover": adjust(bg1, 0.05),
    "noti-bg-focus": bg1,
    "noti-close-bg": fg2,
    "noti-close-bg-hover": adjust(fg2, 0.1),
    "text-color": fg1,
    "text-color-disabled": adjust(fg1, -0.2, 0.8),
    "bg-selected": blue,
    "red-base": red,
    "red-hover": adjust(red, 0.15),
    "green-base": green,
    "blue-base": blue,
}

swaync_css.parent.mkdir(parents=True, exist_ok=True)
with open(swaync_css, "w") as f:
    f.write("/* Generated by walgen.py */\n\n")
    for k, v in swaync_colors.items():
        f.write(f"@define-color {k} {v};\n")

print("âœ… Waybar, Fuzzel, and SwayNC color files generated.")
print(f"ðŸ“„ Waybar: {waybar_css}")
print(f"ðŸ“„ Fuzzel: {fuzzel_ini}")
print(f"ðŸ“„ SwayNC: {swaync_css}")

